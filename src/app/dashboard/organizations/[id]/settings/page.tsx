"use client";

import {
    AlertDialog,
    AlertDialogAction,
    AlertDialogCancel,
    AlertDialogContent,
    AlertDialogDescription,
    AlertDialogFooter,
    AlertDialogHeader,
    AlertDialogTitle,
    AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Skeleton } from "@/components/ui/skeleton";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/components/ui/use-toast";
import { slugify } from "@/lib/utils";
import { zodResolver } from "@hookform/resolvers/zod";
import { AlertTriangle, ArrowLeft, Building2, ChevronRight, Loader2, Save, Trash2 } from "lucide-react";
import { useParams, useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import * as z from "zod";

interface Organization {
    id: string;
    name: string;
    slug: string;
    description?: string;
    website?: string;
    logoUrl?: string;
    role: string;
    _count: {
        members: number;
        templates: number;
        quizzes: number;
    };
}

const organizationFormSchema = z.object({
    name: z.string().min(3, {
        message: "Organization name must be at least 3 characters.",
    }),
    description: z.string().optional(),
    website: z.string().url({ message: "Please enter a valid URL." }).optional().or(z.literal("")),
    logoUrl: z.string().url({ message: "Please enter a valid URL." }).optional().or(z.literal("")),
});

export default function OrganizationSettingsPage() {
    const params = useParams();
    const organizationId = params.id as string;
    const [organization, setOrganization] = useState<Organization | null>(null);
    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);
    const [deleting, setDeleting] = useState(false);
    const [previewSlug, setPreviewSlug] = useState("");
    const router = useRouter();
    const { toast } = useToast();

    const form = useForm<z.infer<typeof organizationFormSchema>>({
        resolver: zodResolver(organizationFormSchema),
        defaultValues: {
            name: "",
            description: "",
            website: "",
            logoUrl: "",
        },
    });

    useEffect(() => {
        async function fetchOrganizationDetails() {
            try {
                const response = await fetch(`/api/organizations/${organizationId}`);
                if (!response.ok) {
                    throw new Error("Failed to fetch organization details");
                }
                const data = await response.json();
                setOrganization(data);

                // Set form values
                form.reset({
                    name: data.name,
                    description: data.description || "",
                    website: data.website || "",
                    logoUrl: data.logoUrl || "",
                });

                setPreviewSlug(data.slug);
            } catch (error) {
                console.error("Error fetching organization details:", error);
                toast({
                    variant: "destructive",
                    title: "Error",
                    description: "Failed to load organization details.",
                });
            } finally {
                setLoading(false);
            }
        }

        fetchOrganizationDetails();
    }, [organizationId, form, toast]);

    // Update preview slug when name changes
    useEffect(() => {
        const subscription = form.watch((value, { name }) => {
            if (name === "name" && value.name && organization) {
                // Only update preview if slug was auto-generated (matches current name)
                const currentNameSlug = slugify(organization.name);
                const isAutoGenerated = organization.slug === currentNameSlug;

                if (isAutoGenerated) {
                    setPreviewSlug(slugify(value.name));
                }
            }
        });

        return () => subscription.unsubscribe();
    }, [form, organization]);

    const onSubmit = async (values: z.infer<typeof organizationFormSchema>) => {
        if (!organization) return;
        setSaving(true);
        try {
            const response = await fetch(`/api/organizations/${organizationId}`, {
                method: "PATCH",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(values),
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || "Failed to update organization");
            }

            const data = await response.json();
            setOrganization(data);

            toast({
                title: "Success",
                description: "Organization updated successfully",
            });
        } catch (error) {
            console.error("Error updating organization:", error);
            toast({
                variant: "destructive",
                title: "Error",
                description: error instanceof Error ? error.message : "Failed to update organization",
            });
        } finally {
            setSaving(false);
        }
    };

    const handleDeleteOrganization = async () => {
        if (!organization) return;
        setDeleting(true);
        try {
            const response = await fetch(`/api/organizations/${organizationId}`, {
                method: "DELETE",
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || "Failed to delete organization");
            }

            toast({
                title: "Success",
                description: "Organization deleted successfully",
            });

            // Redirect to organizations list
            router.push("/dashboard/organizations");
        } catch (error) {
            console.error("Error deleting organization:", error);
            toast({
                variant: "destructive",
                title: "Error",
                description: error instanceof Error ? error.message : "Failed to delete organization",
            });
            setDeleting(false);
        }
    };

    if (loading) {
        return (
            <div className="space-y-6">
                <div className="flex items-center space-x-2">
                    <Skeleton className="h-8 w-8 rounded-full" />
                    <div>
                        <Skeleton className="h-6 w-48" />
                        <Skeleton className="h-4 w-24 mt-1" />
                    </div>
                </div>
                <Card>
                    <CardHeader>
                        <Skeleton className="h-8 w-48" />
                        <Skeleton className="h-4 w-full max-w-md" />
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <Skeleton className="h-10 w-full" />
                        <Skeleton className="h-10 w-full" />
                        <Skeleton className="h-10 w-full" />
                    </CardContent>
                </Card>
            </div>
        );
    }

    if (!organization) {
        return (
            <div className="text-center py-12">
                <Building2 className="mx-auto h-12 w-12 text-muted-foreground opacity-50 mb-4" />
                <h3 className="text-lg font-medium">Organization not found</h3>
                <p className="text-muted-foreground mt-1 mb-4">
                    The organization you are looking for does not exist or you don't have access to it.
                </p>
                <Button onClick={() => router.push("/dashboard/organizations")}>
                    Go back to Organizations
                </Button>
            </div>
        );
    }

    const canManageSettings = organization?.role === "OWNER" || organization?.role === "ADMIN";
    const canDeleteOrg = organization?.role === "OWNER";

    if (!canManageSettings) {
        return (
            <div className="text-center py-12">
                <AlertTriangle className="mx-auto h-12 w-12 text-amber-500 mb-4" />
                <h3 className="text-lg font-medium">Access Denied</h3>
                <p className="text-muted-foreground mt-1 mb-4">
                    You don't have permission to manage settings for this organization.
                </p>
                <Button onClick={() => router.push(`/dashboard/organizations/${organizationId}`)}>
                    Go back to Organization
                </Button>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            {/* Header */}
            <div className="flex flex-col space-y-1">
                <div className="flex items-center text-sm text-muted-foreground mb-1">
                    <span
                        className="hover:underline cursor-pointer"
                        onClick={() => router.push("/dashboard/organizations")}
                    >
                        Organizations
                    </span>
                    <ChevronRight className="h-4 w-4 mx-1" />
                    <span
                        className="hover:underline cursor-pointer"
                        onClick={() => router.push(`/dashboard/organizations/${organizationId}`)}
                    >
                        {organization.name}
                    </span>
                    <ChevronRight className="h-4 w-4 mx-1" />
                    <span>Settings</span>
                </div>
                <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                        <Button
                            variant="outline"
                            size="icon"
                            onClick={() => router.push(`/dashboard/organizations/${organizationId}`)}
                        >
                            <ArrowLeft className="h-4 w-4" />
                            <span className="sr-only">Back</span>
                        </Button>
                        <h1 className="text-2xl font-bold tracking-tight">Organization Settings</h1>
                    </div>
                </div>
            </div>

            {/* Settings Form */}
            <Card>
                <CardHeader>
                    <CardTitle>General Settings</CardTitle>
                    <CardDescription>
                        Update basic information about your organization
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                            <FormField
                                control={form.control}
                                name="name"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Organization Name</FormLabel>
                                        <FormControl>
                                            <Input placeholder="My Organization" {...field} />
                                        </FormControl>
                                        <FormDescription>
                                            Your organization's public display name
                                        </FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            <div>
                                <FormLabel>Slug</FormLabel>
                                <div className="flex h-10 w-full rounded-md border border-input bg-muted px-3 py-2 text-sm text-muted-foreground">
                                    {previewSlug}
                                </div>
                                <p className="text-sm text-muted-foreground mt-1">
                                    Organization URLs are based on the name and can't be directly edited
                                </p>
                            </div>

                            <FormField
                                control={form.control}
                                name="description"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Description</FormLabel>
                                        <FormControl>
                                            <Textarea
                                                placeholder="Organization description (optional)"
                                                className="resize-none"
                                                {...field}
                                            />
                                        </FormControl>
                                        <FormDescription>
                                            Briefly describe your organization
                                        </FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <FormField
                                    control={form.control}
                                    name="website"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Website</FormLabel>
                                            <FormControl>
                                                <Input placeholder="https://example.com" {...field} />
                                            </FormControl>
                                            <FormDescription>
                                                Your organization's website (optional)
                                            </FormDescription>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="logoUrl"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Logo URL</FormLabel>
                                            <FormControl>
                                                <Input placeholder="https://example.com/logo.png" {...field} />
                                            </FormControl>
                                            <FormDescription>
                                                URL to your organization's logo (optional)
                                            </FormDescription>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />
                            </div>

                            <div className="flex justify-end">
                                <Button type="submit" disabled={saving}>
                                    {saving ? (
                                        <>
                                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                            Saving...
                                        </>
                                    ) : (
                                        <>
                                            <Save className="mr-2 h-4 w-4" />
                                            Save Changes
                                        </>
                                    )}
                                </Button>
                            </div>
                        </form>
                    </Form>
                </CardContent>
            </Card>

            {/* Danger Zone */}
            {canDeleteOrg && (
                <Card className="border-destructive">
                    <CardHeader>
                        <CardTitle className="text-destructive">Danger Zone</CardTitle>
                        <CardDescription>
                            These actions cannot be undone
                        </CardDescription>
                    </CardHeader>
                    <CardContent>
                        <div className="flex items-center justify-between">
                            <div>
                                <h3 className="font-medium">Delete this organization</h3>
                                <p className="text-muted-foreground text-sm">
                                    This will permanently delete the organization, all its members, quizzes, and templates
                                </p>
                            </div>
                            <AlertDialog>
                                <AlertDialogTrigger asChild>
                                    <Button variant="destructive">
                                        <Trash2 className="mr-2 h-4 w-4" />
                                        Delete Organization
                                    </Button>
                                </AlertDialogTrigger>
                                <AlertDialogContent>
                                    <AlertDialogHeader>
                                        <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                                        <AlertDialogDescription>
                                            This action cannot be undone. This will permanently delete the organization{" "}
                                            <strong>{organization.name}</strong> and remove all of its data from our servers.
                                        </AlertDialogDescription>
                                    </AlertDialogHeader>
                                    <AlertDialogFooter>
                                        <AlertDialogCancel>Cancel</AlertDialogCancel>
                                        <AlertDialogAction
                                            className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                                            onClick={handleDeleteOrganization}
                                            disabled={deleting}
                                        >
                                            {deleting ? (
                                                <>
                                                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                                    Deleting...
                                                </>
                                            ) : (
                                                <>Delete</>
                                            )}
                                        </AlertDialogAction>
                                    </AlertDialogFooter>
                                </AlertDialogContent>
                            </AlertDialog>
                        </div>
                    </CardContent>
                </Card>
            )}
        </div>
    );
} 