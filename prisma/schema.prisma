generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Template {
  id          String   @id @default(cuid())
  name        String
  html        String
  css         String?
  variables   Json
  quizType    QuizType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  quizzes     Quiz[]
  imageUrl    String?
  description String?
}

model Quiz {
  id           String         @id @default(cuid())
  title        String
  answer       String
  solution     String?        // Optional field to explain how to solve the quiz
  variables    Json?          // Contains all quiz data including hints, template variables, and other quiz-specific content
  templateId   String
  userId       String?        // User who created the quiz
  user         User?          @relation("UserQuizzes", fields: [userId], references: [id], onDelete: SetNull)
  imageUrl     String?
  status       QuizStatus     @default(DRAFT)
  language     String         @default("en")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  template     Template       @relation(fields: [templateId], references: [id])
  scheduledPost ScheduledPost[]
  
  @@index([userId])
}

model ScheduledPost {
  id            String         @id @default(cuid())
  quizId        String
  quiz          Quiz           @relation(fields: [quizId], references: [id])
  scheduledAt   DateTime
  publishedAt   DateTime?
  status        PostStatus     @default(PENDING)
  fbPostId      String?        // Facebook post ID after publishing
  caption       String?        // Optional Facebook post caption
  errorMessage  String?        // Store error message if publishing fails
  retryCount    Int           @default(0)
  lastRetryAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([scheduledAt])
  @@index([status])
  @@index([quizId])
  @@unique([quizId, scheduledAt])  // Prevent double-booking the same quiz at the same time
}

model AutoScheduleSlot {
  id          String   @id @default(cuid())
  dayOfWeek   Int      // 0-6 (Sunday-Saturday)
  timeOfDay   String   // HH:mm format in UTC
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([dayOfWeek, timeOfDay])
  @@index([dayOfWeek, timeOfDay])
}

model Settings {
  id                    String   @id @default("default")
  autoScheduleEnabled   Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model FacebookSettings {
  id              String   @id @default(cuid())
  appId           String
  appSecret       String
  pageId          String
  pageAccessToken String
  pageName        String?
  isConnected     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("facebook_settings")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  password        String?   // Hashed password
  role            UserRole  @default(USER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sessions        Session[]
  quizzes         Quiz[]    @relation("UserQuizzes")
  wordUsage       WordUsage[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  
  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  
  @@unique([identifier, token])
}

model WordUsage {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  word       String
  language   String
  isUsed     Boolean  @default(true)
  usedAt     DateTime @default(now())
  
  @@unique([userId, word, language])
  @@index([userId])
  @@index([word])
}

enum QuizStatus {
  DRAFT
  READY        // Quiz is ready to be scheduled
  SCHEDULED    // Quiz has been scheduled
  PUBLISHED    // Quiz has been published
  FAILED       // Publishing failed
}

enum PostStatus {
  PENDING      // Waiting to be published
  PROCESSING   // Currently being published
  PUBLISHED    // Successfully published
  FAILED       // Failed to publish
  CANCELLED    // Cancelled by user
}

enum QuizType {
  WORDLE
  NUMBER_SEQUENCE
  RHYME_TIME
  CONCEPT_CONNECTION
}

enum UserRole {
  USER
  ADMIN
}
