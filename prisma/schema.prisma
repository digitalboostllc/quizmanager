generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
  engineType      = "binary"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  relationMode = "prisma"
}

model Template {
  id          String   @id @default(cuid())
  name        String
  html        String
  css         String?
  variables   Json
  quizType    QuizType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageUrl    String?
  description String?
  quizzes     Quiz[]
}

model Quiz {
  id            String          @id @default(cuid())
  title         String
  answer        String
  solution      String?
  variables     Json?
  templateId    String
  imageUrl      String?
  status        QuizStatus      @default(DRAFT)
  language      String          @default("en")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        String?
  template      Template        @relation(fields: [templateId], references: [id])
  user          User?           @relation("UserQuizzes", fields: [userId], references: [id])
  scheduledPost ScheduledPost[]

  @@index([userId])
  @@index([title])
  @@index([status])
  @@index([createdAt])
  @@index([templateId])
}

model ScheduledPost {
  id           String     @id @default(cuid())
  quizId       String
  scheduledAt  DateTime
  publishedAt  DateTime?
  status       PostStatus @default(PENDING)
  fbPostId     String?
  caption      String?
  errorMessage String?
  retryCount   Int        @default(0)
  lastRetryAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  quiz         Quiz       @relation(fields: [quizId], references: [id])

  @@unique([quizId, scheduledAt])
  @@index([scheduledAt])
  @@index([status])
  @@index([quizId])
}

model AutoScheduleSlot {
  id        String   @id @default(cuid())
  dayOfWeek Int
  timeOfDay String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([dayOfWeek, timeOfDay])
  @@index([dayOfWeek, timeOfDay])
}

model Settings {
  id                  String   @id @default("default")
  autoScheduleEnabled Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model FacebookSettings {
  id              String   @id @default(cuid())
  appId           String
  appSecret       String
  pageId          String
  pageAccessToken String
  pageName        String?
  isConnected     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("facebook_settings")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole    @default(USER)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  quizzes       Quiz[]      @relation("UserQuizzes")
  sessions      Session[]
  wordUsage     WordUsage[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model WordUsage {
  id       String   @id @default(cuid())
  userId   String
  word     String
  language String
  isUsed   Boolean  @default(true)
  usedAt   DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, word, language])
  @@index([userId])
  @@index([word])
}

enum QuizStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
  READY
}

enum PostStatus {
  PENDING
  PROCESSING
  PUBLISHED
  FAILED
  CANCELLED
}

enum QuizType {
  WORDLE
  NUMBER_SEQUENCE
  RHYME_TIME
  CONCEPT_CONNECTION
}

enum UserRole {
  USER
  ADMIN
}
